# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  BuildConfiguration: Release

stages:
- stage: build
  jobs:
  - job: run_build
    pool: 
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: DotNetCoreCLI@2
      displayName: 'Configure ApiKeyBasic'
      inputs:
        command: 'custom'
        custom: 'user-secrets'
        arguments: 'set ApiKeyBasic $(ApiKeyBasic)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/GW2SDK.Tests'

    - task: DotNetCoreCLI@2
      displayName: 'Configure ApiKeyFull'
      inputs:
        command: 'custom'
        custom: 'user-secrets'
        arguments: 'set ApiKeyFull $(ApiKeyFull)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/GW2SDK.Tests'

    - task: DotNetCoreCLI@2
      displayName: 'Build all projects'
      inputs:
        command: 'build'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Test all projects'
      inputs:
        command: 'test'
        arguments: '--configuration $(BuildConfiguration) --no-build --settings $(System.DefaultWorkingDirectory)/coverletArgs.runsettings'

    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage results
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet package'
      inputs:
        command: 'pack'
        searchPatternPack: 'GW2SDK'
        versioningScheme: 'byPrereleaseNumber'
        majorVersion: '1'
        minorVersion: '0'
        patchVersion: '0'
        nobuild: true
        verbosityPack: Normal

    - task: PublishPipelineArtifact@0
      displayName: 'Push packages to Artifacts'
      inputs:
        artifactName: 'nupkg'
        targetPath: $(Build.ArtifactStagingDirectory)

- stage: deploy_azdo
  dependsOn: build
  jobs:
  - deployment: push_internal
    strategy:
     runOnce:
       deploy:
        steps:
        - task: NuGetCommand@2
          displayName: 'Push package to internal feed'
          inputs:
            command: push
            packagesToPush: '$(System.ArtifactsDirectory)/**/*.nupkg;!$(System.ArtifactsDirectory)/**/*.symbols.nupkg'
            publishVstsFeed: '/d9c605b4-f00a-49a3-9816-aa5bf6835c05'

- stage: deploy_gh
  dependsOn: build
  jobs:
  - deployment: push_github
    strategy:
      runOnce:
        steps:
          - task: NuGetCommand@2
            displayName: Push package to GitHub Packages
            inputs:
              command: push
              packagesToPush: '$(System.ArtifactsDirectory)/**/*.nupkg;!$(System.ArtifactsDirectory)/**/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'GitHub Packages'
